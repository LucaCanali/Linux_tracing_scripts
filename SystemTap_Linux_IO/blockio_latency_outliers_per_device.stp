#!/usr/bin/stap
#
# blockio_latency_outliers_per_device.stp
#
# This is a SystemTap script to drill down on latency outliers from the Linux kernel block I/O interface
#
# By Luca.Canali@cern.ch, July 2015
#
# Note: the use of kernel.trace("block_rq_issue") and kernel.trace("block_rq_complete") allows the 
# script to work without the need to install kernel debuginfo.
#
# Notes: struct bio, details at http://lxr.free-electrons.com/source/include/linux/blk_types.h
#        struct request, details at http://lxr.free-electrons.com/source/include/linux/blkdev.h
#
# Usage: stap -v blockio_latency_outliers_per_device.stp <interval> <latency threashold (optional)>
#
# Tested on Systemtap versions 1.8, 2,5 and 2.6, RHEL/OL 5,6,7 (i.e. up to kernel 3.10)
# Note: this script will not work on some recent kernels due for example to changes to 
# kernel.trace probes and to struct bio
#

global RequestDevice, RequestSector, RequestTime[100000], LatencyTimes[1000]

# variables used to define filters, edit as needed
global IO_size = -1      # this will be used as a filter for the I/O request size
                         # the value 8192 targets 8KB operations for Oracle single-block I/O
			             # use the value -1 to disable this filter
global IO_operation = -1 # this will be used as a filter: only read operations, i.e. bit N.1 of bi_rw == 0
                         # a value of 0 considers only read operations (the value 1 is for write) 
			             # use the value -1 to disable this filter
global IO_devmaj = -1    # this will be used as a filter: device major number ( -1 means no filter)
                         # Example use the value 253 will consider only device 253 (device mapper block devices)
global IO_devmin = -1    # this will be used as a filter: device minor number (or -1 if no filter)

global LatencyThreshold = 500000 # Latency threshold after which a warning is printed to stdout, 
                                 # it is overwritten by script parameter 1 if present via the begin probe

probe begin {
   %( $# > 1 %? LatencyThreshold = $2 %) # if a parameter is provided, use it to overwrite the latency warning threshold
   printf("Measuring block I/O latency and statistics\n")
   printf("A warning will be printed for I/Os with latency higher than %d microseconds\n", LatencyThreshold)
   printf("Statistics will be printed every %d seconds. Press CTRL-C to stop\n\n", $1)
}

# probe on block I/O as it is issued, record the I/O if it matches the filters
probe kernel.trace("block_rq_issue") {
   t = gettimeofday_us()
   # examine only the first bio record for simplicity (it seems that more than 1 bio is rare anyways)
   # rq type is struct request
   if ($rq->bio)                        # discard entries without a bio record
      if ($rq->bio->bi_bdev)            # discard entries without a device associated
         if ($rq->bio->bi_flags & 8)    # check BIO_SEG_VALID, introduced to avoid double counting with device mapper
            if ($rq->bio->bi_size > 0)  # discard entries with size<=0
               if ((IO_operation == -1) ||(($rq->bio->bi_rw & 0x1) == IO_operation)) # filter on operation type (read or write)
                  if ((IO_size == -1) || ($rq->bio->bi_size == IO_size)) {           # filter on I/O size
                     devmaj = $rq->bio->bi_bdev->bd_dev >> 20
                     devmin = $rq->bio->bi_bdev->bd_dev - (devmaj << 20)	
	              if ((devmaj == IO_devmaj ) || (IO_devmaj == -1))        # optional filter on device major number
   	                 if ((devmin == IO_devmin ) || (IO_devmin == -1))  {  # optional filter on device minor number
                        RequestTime[$rq->bio] = t                     # record the start time of this block I/O
                        RequestDevice[$rq->bio] = kernel_string($rq->bio->bi_bdev->bd_disk->disk_name)
                        RequestSector[$rq->bio] = $rq->bio->bi_sector
                     }
                  }
}

probe kernel.trace("block_rq_complete") {
   t = gettimeofday_us()
   if ($rq->bio) {                        # discard entries without a bio record
       s = RequestTime[$rq->bio]
       if (s > 0) {
          delta = t-s
          LatencyTimes[RequestDevice[$rq->bio]] <<< delta   # populates latency histogram
          if (delta > LatencyThreshold) {
              printf("latency warning, >%d microsec: device=%s, sector=%d, latency=%d\n", 
			          LatencyThreshold, RequestDevice[$rq->bio], RequestSector[$rq->bio], delta)
          }
       delete RequestTime[$rq->bio]  # clear the stored info for this $rq
       delete RequestDevice[$rq->bio]
       delete RequestSector[$rq->bio]
      }
   }
}

probe timer.sec($1) {
   printf("I/O latency basic statistics per device, measurement time: %d seconds\nLatency measured in microseconds\n", $1)
   printf("%-12s %14s %14s %14s %14s\n\n", "Disk name", "Num I/Os", "Min latency", "Avg latency", "Max latency")
   foreach ([disk] in LatencyTimes) {
            printf("%-12s %14d %14d %14d %14d\n",
			       disk, @count(LatencyTimes[disk]), @min(LatencyTimes[disk]), @avg(LatencyTimes[disk]), @max(LatencyTimes[disk]))
   }
   printf("-----\n\n")
   delete(LatencyTimes)  # resets all stats
}

