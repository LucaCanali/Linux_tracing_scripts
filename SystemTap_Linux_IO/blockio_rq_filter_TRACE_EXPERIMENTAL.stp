#!/usr/bin/stap
#
# Usage: stap -v blockio_rq_filter_TRACE_EXPERIMENTAL.stp
#
# Trace all block I/O calls for a given device, USE WITH CARE, avoid running this on I/O-busy systems
# Edit the script with the details of the device to trace before running
#
# Luca.Canali@cern.ch
# July 2015
# Requires SystemTap 2.6 or higher
# Tested on RHEL/EL 6.x,7.x
# Note: this script will not work on some recent kernels due for example to changes to 
# kernel.trace probes and to struct bio
#
# Usage: stap -v blockio_rq_filter_TRACE_EXPERIMENTAL.stp
#

global RequestTime[1000]

# variables used to define filters, edit as needed
global IO_size = -1      # this will be used as a filter for the I/O request size
                         # the value 8192 targets 8KB operations for Oracle single-block I/O
                                     # use the value -1 to disable this filter
global IO_operation = -1 # this will be used as a filter: only read operations, i.e. bit N.1 of bi_rw == 0
                         # a value of 0 considers only read operations (the value 1 is for write)
                                     # use the value -1 to disable this filter
global IO_devmaj = -1    # this will be used as a filter: device major number ( -1 means no filter)
                         # Example use the value 253 will consider only device 253 (device mapper block devices)
						 # Or put here the major number of the device you want to filter 
						 # (use ls -l to find major and minor number)
global IO_devmin = -1    # this will be used as a filter: device minor number (or -1 if no filter)


# probe on block I/O as it is issued, record the I/O if it matches the filters
probe kernel.trace("block_rq_issue") {
   t = gettimeofday_us()
   # examine only the first bio record for simplicity (it seems that more than 1 bio is rare anyways)
   # rq type is struct request
   if ($rq->bio)                        # discard entries without a bio record
      if ($rq->bio->bi_bdev)            # discard entries without a device associated
         if ($rq->bio->bi_flags & 8)    # check BIO_SEG_VALID, introduced to avoid double counting with device mapper
            if ($rq->bio->bi_size > 0)  # discard entries with size<=0
               if ((IO_operation == -1) ||(($rq->bio->bi_rw & 0x1) == IO_operation)) # filter on operation type (read or write)
                  if ((IO_size == -1) || ($rq->bio->bi_size == IO_size)) {           # filter on I/O size
                     devmaj = $rq->bio->bi_bdev->bd_dev >> 20
                     devmin = $rq->bio->bi_bdev->bd_dev - (devmaj << 20)
                     if ((devmaj == IO_devmaj ) || (IO_devmaj == -1))        # optional filter on device major number
                         if ((devmin == IO_devmin ) || (IO_devmin == -1))  {  # optional filter on device minor number
                            printf("block_io rq, bio=%lu, dev=%s, sector=%d\n",$rq->bio,
                                    kernel_string($rq->bio->bi_bdev->bd_disk->disk_name), $rq->bio->bi_sector)
                                    RequestTime[$rq->bio] = t                     # record the start time of this block I/O
                     }
                  }
}

probe kernel.trace("block_rq_complete") {
   t = gettimeofday_us()
   if ($rq->bio) {                        # discard entries without a bio record
       s = RequestTime[$rq->bio]
       if (s > 0) {
          delta = t-s
          printf(".....block_rq_complete, latency microsecond:%d, bio=%lu\n",delta,$rq->bio)
          }
       delete RequestTime[$rq->bio]  # clear the stored info for this $rq
      }
}

