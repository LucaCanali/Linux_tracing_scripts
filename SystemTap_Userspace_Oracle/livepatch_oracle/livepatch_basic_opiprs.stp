#!/usr/local/bin/stap
#
# This is a SystemTap script for modifying on the fly Oracle SQL parsing by 
# hooking on the parsing function opiprs in guru mode.
#    1. A SystemTap probe on the Oracle function opiprs is triggered at every hard parse operation
#    2. The SQL statement is matched against the user-defined TARGET_SQL
#    3. If a match is found the SQL is replaced with REPLACEMENT_SQL
#       This is implemented using an embedded C function: replace_SQL
#       The probe only works if REPLACEMENT_SQL is not longer than TARGET_SQL
#
# Note: This is example code, not intended for production use. It is unsupported and may cause instabilities.
# Requires SystemTap in guru mode
#
# Use: stap -g -v livepatch_basic_opiprs.stp
# Note: optionally add -x <pid> to limit the action to <pid> only (default is for all oracle sessions)
#
# The Oracle binary is expected to be in the PATH: export PATH=$PATH:$ORACLE_HOME/bin
# Run as privileged  user (root)
#
# Note: this is a simplified version of livepatch_opiprs.stp
#
# Compatibility: Oracle 11.2.0.4 on RHEL/OL 6 and 7
#                Oracle 12.1.0.2 on RHEL/OL 6 and 7 with kernel up to 3.10.0-123.x
#                issue: will not work on 12c with Linux kernel version higher than 3.10.0-123.x 
#                       the incompatibility comes from uprobes
#                Use SystemTap version 2.5 or higher. 
#                Kernel debuginfo not needed for this probe.
#
# Author: Luca.Canali@cern.ch
# Created: November 2014, last updated: March 2016.
#

%{
/* Customize here as desired: SQL that will replace TARGET_SQL */
/* Note replacement_sql must not be longer than the target_sql */

#define REPLACEMENT_SQL "select power(count(*),3) from dba_objects"
%}

global TARGET_SQL = "select count(*) from dba_objects, dba_objects, dba_objects"

function replace_SQL(pointersql:long) %{
    char *sqltext;

    sqltext = (char *) STAP_ARG_pointersql;
    /* This changes in memory (stack) the SQL text that will be parsed */
    strcpy(sqltext, "select power(count(*),3) from dba_objects");
%}

probe process("oracle").function("opiprs") {
    sqltext = user_string2(register("rsi"),"error")  
    # debug code
    # sqllength = register("rdx")
    # printf("opiParse: arg2=%s, arg3=%d\n",sqltext,sqllength)
    if (sqltext == TARGET_SQL) {
        printf("FOUND!\n") # debug code
        replace_SQL(register("rsi"))
    }
}


