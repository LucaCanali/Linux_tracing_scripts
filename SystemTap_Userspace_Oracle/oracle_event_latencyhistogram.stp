#!/usr/bin/stap
#
# oracle_event_latencyhistogram.stp
#
# This is a SystemTap script to gather Oracle wait event measurements directly from Oracle binaries  
# and print wait event latency histograms to be consumed by PyLatencyMap for heatmap visualization
#
# Use: stap -v oracle_event_latencyhistogram.stp <event_num>
#
# Note optionally add -x <pid> to limit data collection to 1 process
#
# Note: in case of error ERROR: Skipped too many probes and for a system with many Oracle processes 
#       increase the max number of UPROBES. For example:
#       stap -v -DMAXUPROBES=1500 oracle_event_latency.stp <event_num>
#
# Prerequisite: find the value of <event_num> of interest using Oracle SQL*plus. 
# Example SQL:
#   select event#,name from v$event_name where name in ('db file sequential read', 'log file sync');
#   12.1.0.2 output: 
# EVENT# NAME
# ------- ------------------------
#     146 log file sync
#     153 db file sequential read
# 
# Dependencies: 
#    Needs SystemTap version 2.5 or higher
#    Kernel must have support for uprobes or utrace (use RHEL7.x or RHEL6.x)
#    The oracle executable needs to be in the path, i.e. add $ORACLE_HOME/bin to $PATH
#
# Software versions and compatibility:
#     Linux RHEL/OL 6.x and 7.x 
#     Oracle RDBMS 11.2.0.x and 12.1.0.x
#
# Notable exception and issue with Oracle 12.1.0.2: 
# this script will throw "inode-offset registration error" when run against 12.1.0.2 on 
# RHEL/OL7.1 (i.e. kernel 3.10.0-229.x). The workaround is to use an older kernel
# such as RHEL/OL7.0 (kernel 3.10.0-123.x). It seems to work fine on RHEL/OL 7.1 and 11g.
#
# Author: Luca.Canali@cern.ch (@LucaCanaliDB)
# Additional credits for original contributions: @FritsHoogland
# Version 1.0, March 2015. 
# Based on previous work on Oracle tracing with SystemTap by Luca.Canali@cern.ch, Aug 2014 
#
# Note: this is experimental code, use at your own risk
# 

global eventlatency
global waittime[10000]
global eventnum

probe begin {
   if (argv_1 != "") {
       eventnum = strtol(argv_1, 10)
       printf("Now sampling event N# %d\n", eventnum)
   }
   else {
       printf("Usage: stap -v oracle_event_latency.stp <event_num>\n")
       exit()       
   }   
}

# gather and aggregate wait event latency details into a histogram
probe process("oracle").function("kews_update_wait_time") {
   waittime[pid()] = u32_arg(2)      # update the wait time, the wait event number is captured in the call to kskthewt
}


probe process("oracle").function("kskthewt") {
   # the event number is in arg2
   if ((u32_arg(2) == eventnum) && (waittime[pid()] > 0)) {
       eventlatency <<< waittime[pid()]  # the wait_time was previously recorded into the waittime array
       delete waittime[pid()]
   }
}


# print histogram details every 3 seconds in a format recognized by Pylatencymap
# change to a different repetition rate if you prefer
probe timer.sec(3) {
   if (@count(eventlatency) > 0)
       println(@hist_log(eventlatency))
   delete(eventlatency)
}

