#!/usr/local/bin/stap
#
# trace_oracle_iocalls.stp
#
# This is a SystemTap probe to trace physical I/O to block devices and Oracle wait events 
# the script works by hooking into the OS syscalls and to Oracle kernel function kskthewt
# see also trace_oracle_events_12102.stp
#
# Dependencies (for Oracle userspace tracing): 
#    Use systemtap 2.5 or higher 
#    Kernel must have support for uprobes or utrace (this seems the case for example RHEL7.0 and 6.5)
#    the probe on io_submit and uprobes don't work on RHEL 7.1 ()i.e. kernel 3.10.0-229.x.x)
#    The oracle executable should be in the path: add $ORACLE_HOME/bin in $PATH
#
# Version 1.0, Aug 2014 by Luca.Canali@cern.ch
# Additional credits for original contributions: @FritsHoogland
#
# Note: this is experimental code, use at your own risk 

global active_bio[10000]

probe syscall.pread, syscall.pwrite {
  if (pid() == target()) {  
     printf ("OS: ->%s: timestamp=%d, program=%s, pid=%d, fd=%d, offset=%d, count(bytes)=%d\n", name, local_clock_us(), execname(), pid(), fd, offset, count)
  }
}

probe syscall.pread.return, syscall.pwrite.return {
  if (pid() == target()) {  
     printf ("OS: <-%s: timestamp=%d, program=%s, local_clock_us(), pid=%d, return(bytes)=%d\n", name, local_clock_us(), execname(), pid(), $return)
  }
}

probe syscall.io_submit {
  if (pid() == target()) {
     printf ("OS: ->%s: timestamp=%d, program=%s, pid=%d, nr(num I/O)=%d\n", name, local_clock_us(), execname(), pid(), nr)
     for (i=0; i<$nr; i++) {
         printf("              %d: file descriptor=%d, offset=%d, bytes=%d, opcode=%d\n", i+1, $iocbpp[i]->aio_fildes, 
                $iocbpp[i]->aio_offset, $iocbpp[i]->aio_nbytes, $iocbpp[i]->aio_lio_opcode)
     }
  }
}

probe syscall.io_submit.return {
  if (pid() == target()) {  
     printf ("OS: <-%s: timestamp=%d, program=%s, pid=%d, return(num I/O)=%ld\n", name, local_clock_us(), execname(), pid(), $return)
  }
}

probe syscall.io_getevents {
  if (pid() == target()) {
     printf ("OS: ->%s: timestamp=%d, program=%s, pid=%d, nr=%d, timeout=%s\n", name, local_clock_us(), execname(), pid(), nr, $timeout$)
  }
}

probe syscall.io_getevents.return {
  if (pid() == target()) {
     printf ("OS: <-%s: timestamp=%d, program=%s, pid=%d, return(num I/O)=%ld\n", name, local_clock_us(), execname(), pid(), $return)
     for (i=0; i<$return; i++) {    # cycle over the reaped I/Os
        obj_addr = ($events)[i]->obj     # details of struct iocb in /usr/include/libaio.h
        fildes = user_uint32(obj_addr +20)   
        bytes = user_uint64(obj_addr +32) 
        offset = user_uint64(obj_addr +40) 
        printf("              %d:, fildes=%d, offset=%lu, bytes=%lu\n", i, fildes, offset, bytes)
     }
  }
}

probe ioblock.request {
  if (pid() == target()) { 
     printf("OS:    ->%s, timestamp=%d, pid=%d, devname=%s, sector=%d, size=%d, rw=%d, address_bio=%lu\n", 
             name, local_clock_us(), pid(), devname, sector, size, rw, $bio )
     active_bio[$bio] += 1      
  }
}

probe ioblock_trace.request {
  if (pid() == target()) { 
     printf("OS:      ->%s, timestamp=%d, pid=%d, devname=%s, sector=%d, size=%d, rw=%d, address_bio=%lu\n", 
             name, local_clock_us(), pid(), devname, sector, size, rw, $bio )
  }
}

# the use of active_bio[] is a workaround as pid is not populated in ioblock.end and therefore cannot be used for filtering
probe ioblock.end {
  if (active_bio[$bio] >= 1) {
    printf("OS:    <-%s, timestamp=%d, pid=%d, devname=%s, sector=%d, rw=%d, address_bio=%lu\n", 
            name, local_clock_us(), pid(), devname, sector, rw, $bio)
    active_bio[$bio] -= 1  
  }
}

# this is for 12.1.0.2, see the script trace_oracle_events_11204.stp if you want to trace 11.2.0.4
probe process("oracle").function("kskthewt") {
   xksuse = register("r13")-3928
   ksuudnam = user_string(xksuse + 140)
   ksusenum = user_uint16(xksuse + 1704)
   ksuseopc = user_uint16(xksuse + 1602)
   ksusep1 = user_uint64(xksuse + 1608)
   ksusep2 = user_uint64(xksuse + 1616)
   ksusep3 = user_uint64(xksuse + 1624)
   ksusetim = user_uint32(xksuse + 1632)
   ksusesqh = user_uint32(xksuse + 1868)
   printf("DB WAIT EVENT: timestamp=%ld, pid=%d, sid=%d, name=%s, event#=%u, p1=%lu, p2=%lu, p3=%lu, wait_time=%u, sql_hash=%u\n", 
           u64_arg(1), pid(), ksusenum, ksuudnam, ksuseopc, ksusep1, ksusep2, ksusep3, ksusetim, ksusesqh)
}
